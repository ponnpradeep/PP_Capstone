version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:

  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |            
            make install
      - run:
          name: run lint
          command: |
            make lint

  image-build-push:
    #docker build and push image to the docker hub
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build/Push docker image
          command: |
            #Login to docker hub
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            # Build image and add a descriptive tag
            docker build --tag=pp-capstone_v2 .
            # List docker images
            docker image ls
            # Run web app
            docker run -it --rm -d -p 8080:80 --name web pp-capstone_v2
            # Push image to a docker repository
            docker tag pp-capstone_v2 prayon/pp-capstone_v2
            docker push prayon/pp-capstone_v2
            
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''


  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
            kubectl get nodes
          name: Test cluster
  
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yaml
          resource-name: deployment/pp-capstone-deployment
          
  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
          name: Test Deployment

  delete-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>
          wait: true
          verbose: 3
          no-output-timeout: 20m



workflows:
  deployment:
    jobs:
      - lint
      - image-build-push:
          requires:
             - lint
      - create-cluster:
          cluster-name: pp-capstone-deployment
      - test-cluster:
          cluster-name: pp-capstone-deployment
          requires:
              - create-cluster
      - create-deployment:
            cluster-name:  pp-capstone-deployment
            requires:
              - test-cluster
      - test-deployment:
            cluster-name:  pp-capstone-deployment
            requires:
              - create-deployment     
      - aws-eks/update-container-image:
            cluster-name: pp-capstone-deployment
            container-image-updates: 'pp-capstone-deployment=prayon/pp-capstone_v2'
            get-rollout-status: true
            record: true
            requires:
             - test-deployment
            resource-name:  deployment/pp-capstone-deployment   
      - delete-cluster:
           cluster-name: pp-capstone-deployment
           requires:
            - test-cluster
